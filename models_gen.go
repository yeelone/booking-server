// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package booking

import (
	"booking/models"
	"fmt"
	"io"
	"strconv"
)

type AuthorAndBookRelationshipInput struct {
	BookIds  []int `json:"bookIds"`
	AuthorID int   `json:"authorId"`
}

type AuthorFilterInput struct {
	Name *string `json:"name"`
}

type BookAndChapterRelationshipInput struct {
	ChapterIds []int `json:"chapterIds"`
	BookID     int   `json:"bookId"`
}

type BookFilterInput struct {
	ID     *int    `json:"id"`
	Name   *string `json:"name"`
	Author *string `json:"author"`
}

type ChapterAnalysisInput struct {
	ChapterID int `json:"chapterId"`
}

type ChapterAndDictionaryRelationshipInput struct {
	ChapterID int             `json:"chapterId"`
	DictID    []int           `json:"dictId"`
	Level     DictionaryLevel `json:"level"`
}

type ChapterFilterInput struct {
	Ids   []int `json:"ids"`
	Index *int  `json:"index"`
}

type DeleteIDInput struct {
	Ids []int `json:"ids"`
}

type DictionaryFilterInput struct {
	ID          *int    `json:"id"`
	Word        *string `json:"word"`
	Translation *string `json:"translation"`
	Tag         *string `json:"tag"`
}

type GroupFilterInput struct {
	ID   *int    `json:"id"`
	Name *string `json:"name"`
}

type LoginInput struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type NewAuthor struct {
	Name string `json:"name"`
}

type NewBook struct {
	Name     string `json:"name"`
	AuthorID int    `json:"authorId"`
	Picture  string `json:"picture"`
	Alias    string `json:"alias"`
	UserID   int    `json:"userId"`
}

type NewChapter struct {
	ID        *int   `json:"id"`
	Index     *int   `json:"index"`
	Name      string `json:"name"`
	Content   string `json:"content"`
	PhraseIds []int  `json:"phraseIds"`
	BookID    int    `json:"bookId"`
}

type NewDictionary struct {
	Word        string  `json:"word"`
	Translation string  `json:"translation"`
	Phonetic    *string `json:"phonetic"`
	Definition  *string `json:"definition"`
	Pos         *string `json:"pos"`
	Collins     *string `json:"collins"`
	Oxford      *string `json:"oxford"`
	Tag         *string `json:"tag"`
	Bnc         *string `json:"bnc"`
	Frq         *string `json:"frq"`
	Exchange    *string `json:"exchange"`
	Detail      *string `json:"detail"`
	Audio       *string `json:"audio"`
}

type NewGroup struct {
	ID     *int   `json:"id"`
	Name   string `json:"name"`
	Parent int    `json:"parent"`
	Levels string `json:"levels"`
	UserID []int  `json:"userId"`
}

type NewPhrase struct {
	ID      *int   `json:"id"`
	Content string `json:"content"`
}

type NewRole struct {
	ID     *int   `json:"id"`
	Name   string `json:"name"`
	UserID []int  `json:"userId"`
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type NewUser struct {
	ID       *int    `json:"id"`
	Email    string  `json:"email"`
	Password string  `json:"password"`
	Username string  `json:"username"`
	Nickname *string `json:"nickname"`
	IDCard   *string `json:"id_card"`
	IsSuper  *bool   `json:"is_super"`
	Picture  *string `json:"picture"`
	State    *int    `json:"state"`
}

type Pagination struct {
	Skip int `json:"skip"`
	Take int `json:"take"`
}

type Permission struct {
	Module   string `json:"module"`
	Name     string `json:"name"`
	Resource string `json:"resource"`
	Object   string `json:"object"`
	Checked  bool   `json:"checked"`
}

type PhraseFilterInput struct {
	Content *string `json:"content"`
}

type QueryAuthorResponse struct {
	TotalCount *int            `json:"totalCount"`
	Skip       *int            `json:"skip"`
	Take       *int            `json:"take"`
	Rows       []models.Author `json:"rows"`
}

type QueryBookResponse struct {
	TotalCount *int          `json:"totalCount"`
	Skip       *int          `json:"skip"`
	Take       *int          `json:"take"`
	Rows       []models.Book `json:"rows"`
}

type QueryChapterResponse struct {
	TotalCount *int             `json:"totalCount"`
	Skip       *int             `json:"skip"`
	Take       *int             `json:"take"`
	Rows       []models.Chapter `json:"rows"`
}

type QueryDictionaryResponse struct {
	TotalCount *int                `json:"totalCount"`
	Skip       *int                `json:"skip"`
	Take       *int                `json:"take"`
	Rows       []models.Dictionary `json:"rows"`
}

type QueryGroupResponse struct {
	TotalCount *int           `json:"totalCount"`
	Skip       *int           `json:"skip"`
	Take       *int           `json:"take"`
	Rows       []models.Group `json:"rows"`
}

type QueryPermissionResponse struct {
	TotalCount *int         `json:"totalCount"`
	Skip       *int         `json:"skip"`
	Take       *int         `json:"take"`
	Rows       []Permission `json:"rows"`
}

type QueryPhraseResponse struct {
	TotalCount *int            `json:"totalCount"`
	Skip       *int            `json:"skip"`
	Take       *int            `json:"take"`
	Rows       []models.Phrase `json:"rows"`
}

type QueryRoleResponse struct {
	TotalCount *int          `json:"totalCount"`
	Skip       *int          `json:"skip"`
	Take       *int          `json:"take"`
	Rows       []models.Role `json:"rows"`
}

type QueryUserResponse struct {
	TotalCount *int          `json:"totalCount"`
	Skip       *int          `json:"skip"`
	Take       *int          `json:"take"`
	Rows       []models.User `json:"rows"`
}

type RoleAndPermissionRelationshipInput struct {
	Role        string   `json:"role"`
	Permissions []string `json:"permissions"`
}

type RoleFilterInput struct {
	ID   *int    `json:"id"`
	Name *string `json:"name"`
}

type UpdateAuthorInput struct {
	ID   int     `json:"id"`
	Name *string `json:"name"`
}

type UpdateBookInput struct {
	ID       int     `json:"id"`
	Name     *string `json:"name"`
	AuthorID *int    `json:"authorId"`
	Picture  *string `json:"picture"`
	Alias    *string `json:"alias"`
	UserID   *int    `json:"userId"`
}

type UpdateChapterInput struct {
	ID        int     `json:"id"`
	Index     *int    `json:"index"`
	Name      *string `json:"name"`
	Content   *string `json:"content"`
	PhraseIds []int   `json:"phraseIds"`
}

type UpdateDictionaryInput struct {
	ID          int     `json:"id"`
	Word        *string `json:"word"`
	Phonetic    *string `json:"phonetic"`
	Definition  *string `json:"definition"`
	Translation *string `json:"translation"`
	Pos         *string `json:"pos"`
	Collins     *string `json:"collins"`
	Oxford      *string `json:"oxford"`
	Tag         *string `json:"tag"`
	Bnc         *string `json:"bnc"`
	Frq         *string `json:"frq"`
	Exchange    *string `json:"exchange"`
	Detail      *string `json:"detail"`
	Audio       *string `json:"audio"`
}

type UpdateGroupInput struct {
	ID     int     `json:"id"`
	Name   *string `json:"name"`
	Parent *int    `json:"parent"`
	Levels *string `json:"levels"`
	UserID []int   `json:"userId"`
}

type UpdatePhraseInput struct {
	ID      int     `json:"id"`
	Content *string `json:"content"`
}

type UpdateRoleInput struct {
	ID     int     `json:"id"`
	Name   *string `json:"name"`
	UserID []int   `json:"userId"`
}

type UpdateUserInput struct {
	ID       int     `json:"id"`
	Email    *string `json:"email"`
	Password *string `json:"password"`
	Username *string `json:"username"`
	Nickname *string `json:"nickname"`
	IDCard   *string `json:"id_card"`
	IsSuper  *bool   `json:"is_super"`
	Picture  *string `json:"picture"`
	State    *int    `json:"state"`
}

type UserAndGroupRelationshipInput struct {
	UserIds []int `json:"userIds"`
	GroupID int   `json:"groupId"`
}

type UserAndRoleRelationshipInput struct {
	UserIds []int `json:"userIds"`
	RoleID  int   `json:"roleId"`
}

type UserFilterInput struct {
	ID       *int    `json:"id"`
	Username *string `json:"username"`
	Email    *string `json:"email"`
	Phone    *string `json:"phone"`
	State    *int    `json:"state"`
}

type DictionaryLevel string

const (
	DictionaryLevelCet4   DictionaryLevel = "cet4"
	DictionaryLevelCet6   DictionaryLevel = "cet6"
	DictionaryLevelKy     DictionaryLevel = "ky"
	DictionaryLevelToefi  DictionaryLevel = "toefi"
	DictionaryLevelIelts  DictionaryLevel = "ielts"
	DictionaryLevelGre    DictionaryLevel = "gre"
	DictionaryLevelPhrase DictionaryLevel = "phrase"
)

func (e DictionaryLevel) IsValid() bool {
	switch e {
	case DictionaryLevelCet4, DictionaryLevelCet6, DictionaryLevelKy, DictionaryLevelToefi, DictionaryLevelIelts, DictionaryLevelGre, DictionaryLevelPhrase:
		return true
	}
	return false
}

func (e DictionaryLevel) String() string {
	return string(e)
}

func (e *DictionaryLevel) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DictionaryLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DictionaryLevel", str)
	}
	return nil
}

func (e DictionaryLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GroupOrderByInput string

const (
	GroupOrderByInputNameAsc       GroupOrderByInput = "name_ASC"
	GroupOrderByInputNameDesc      GroupOrderByInput = "name_DESC"
	GroupOrderByInputCreatedAtAsc  GroupOrderByInput = "created_at_ASC"
	GroupOrderByInputCreatedAtDesc GroupOrderByInput = "created_at_DESC"
)

func (e GroupOrderByInput) IsValid() bool {
	switch e {
	case GroupOrderByInputNameAsc, GroupOrderByInputNameDesc, GroupOrderByInputCreatedAtAsc, GroupOrderByInputCreatedAtDesc:
		return true
	}
	return false
}

func (e GroupOrderByInput) String() string {
	return string(e)
}

func (e *GroupOrderByInput) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GroupOrderByInput(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GroupOrderByInput", str)
	}
	return nil
}

func (e GroupOrderByInput) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
