directive @hasRole(resolver: String!) on FIELD_DEFINITION
directive @needLogin(resolver: String!) on FIELD_DEFINITION

type QueryUserResponse{
    totalCount:Int,
    skip:Int,
    take:Int,
    rows: [User!]!
}

type User {
    id: ID!
    email: String!
    username: String!
    nickname: String!
    id_card: String!
    password: String!
    is_super: Boolean!
    picture: String!
    state: Int!
    createdAt: String!
    updatedAt: String!
    deletedAt: String!
    qrcode: String!
    qrcodeUuid: String!
    groups(pagination: Pagination):QueryGroupResponse!
    roles(pagination: Pagination):QueryRoleResponse!
    tickets(pagination: Pagination,filter:TicketFilterInput):QueryTicketResponse!
}

type QueryGroupResponse{
    totalCount:Int,
    skip:Int,
    take:Int,
    rows: [Group!]!
}

type Group {
    id: ID!
    name: String!
    parent: Int!
    adminId: Int!
    adminInfo: User!
    levels: String!
    createdAt: String!
    updatedAt: String!
    deletedAt: String!

    users(filter:UserFilterInput, pagination: Pagination):QueryUserResponse!
    canteens(filter:CanteenFilterInput, pagination: Pagination):QueryCanteenResponse!
}

type Booking {
    id:ID!
    userId:Int!
    canteenId:Int!
    type:String!
    date:String!

    createdAt: String!
    updatedAt: String!
    deletedAt: String!
}

type QueryBookingResponse{
    totalCount: Int
    skip: Int
    take: Int
    rows: [Booking!]!
}

type Count{
    breakfast: Int!
    lunch: Int!
    dinner: Int!
}

type QueryTicketResponse{
    totalCount:Int
    skip:Int
    take:Int
    count: Count
    rows: [Ticket!]!
}

type Ticket {
    id: ID!
    UUID: String!
    userId:Int!
    type:Int!
    price:Int!
    createdAt: String!
    updatedAt: String!
}

input TicketFilterInput {
    id: Int
    userId:Int
    uuid:String
    count: Boolean
}

type QueryTicketRecordResponse {
    totalCount:Int
    skip:Int
    take:Int
    rows: [TicketRecord!]!
}

type TicketRecord {
    id: ID!
    operator: Int!
    owner: Int!
    number: Int!
    action: String!
    description: String!
    createdAt: String!
    updatedAt: String!
    deletedAt: String!
}

input TicketRecordFilterInput{
    operator: Int
    owner: Int!
}

type QueryDishesResponse{
    totalCount:Int
    skip:Int
    take:Int
    rows: [Dishes!]!
}

type Dishes {
    id: ID!
    name: String!
    picture: String!
    createdAt: String!
    updatedAt: String!
    deletedAt: String!
}

input DishesFilterInput {
    id: Int
    name:String
}

type CanteenCount{
    date:String!
    breakfast:Int!
    lunch:Int!
    dinner:Int!
}

type Canteen {
    id: ID!
    name: String!
    groupID: Int!
    breakfastTime: String!
    breakfastPicture: String
    bookingBreakfastDeadline: String!
    lunchTime: String!
    lunchPicture: String
    bookingLunchDeadline: String!
    dinnerTime: String!
    dinnerPicture: String
    bookingDinnerDeadline: String!
    cancelTime:Int!
    createdAt: String!
    updatedAt: String!
    deletedAt: String!
    qrcode: String!
    qrcodeUuid: String!
    count: [CanteenCount!]
    admin: User!
}

type QueryCanteenResponse{
    totalCount:Int,
    skip:Int,
    take:Int,
    rows: [Canteen!]!
}

input CanteenFilterInput {
    id: Int
    name:String
    groupID: Int
    adminID: Int
}

type Role {
    id: ID!
    name: String!
    createdAt: String!
    updatedAt: String!
    deletedAt: String!
    users(filter:UserFilterInput, pagination: Pagination):QueryUserResponse!
}

type QueryRoleResponse{
    totalCount:Int,
    skip:Int,
    take:Int,
    rows: [Role!]!
}

type Permission {
    module:String!
    name:String!
    resource:String!
    object:String!
    checked:Boolean!
    createdAt: String!
    updatedAt: String!
    deletedAt: String!
}

type QueryPermissionResponse{
    totalCount: Int,
    skip: Int,
    take: Int,
    rows: [Permission!]!
}

input Pagination {
    skip: Int!
    take: Int!
}

# filter
input UserFilterInput {
    id: Int
    username:String
    email:String
    phone:String
    state:Int
}

input GroupFilterInput {
    id: Int
    name:String
}

input RoleFilterInput {
    id: Int
    name:String
}

input BookingFilterInput {
    userId: Int
    canteenId:Int
}

# order by
enum GroupOrderByInput {
    name_ASC
    name_DESC
    created_at_ASC
    created_at_DESC
}

input RoleAndUserFilterInput {
    roleId:Int!
    userIds:[Int!]!
}

type OrgDashboard{
    name:String!
    userCount:Int!
    canteenCount: Int!
}

type SystemInfo {
    currentLoginCount: Int!
}

type DashboardResponse {
    orgInfo: [OrgDashboard!]!
    systemInfo: SystemInfo!
    ticketInfo: [String!]
}

type Query {
    groups(filter:GroupFilterInput, pagination: Pagination,orderBy:GroupOrderByInput): QueryGroupResponse!  @hasRole(resolver: "groups") @needLogin(resolver: "groups")
    users(filter:UserFilterInput, pagination: Pagination):QueryUserResponse!  @hasRole(resolver: "users") @needLogin(resolver: "users")
    roles(filter:RoleFilterInput, pagination: Pagination):QueryRoleResponse!  @hasRole(resolver: "roles") @needLogin(resolver: "roles")
    checkUserNotInRole(filter:RoleAndUserFilterInput): [Int!]!  @hasRole(resolver: "checkUserNotInRole") @needLogin(resolver: "checkUserNotInRole")
    permissions(filter:RoleFilterInput!):QueryPermissionResponse!  @hasRole(resolver: "permissions") @needLogin(resolver: "permissions")
    tickets(filter:TicketFilterInput, pagination: Pagination):QueryTicketResponse!  @hasRole(resolver: "tickets") @needLogin(resolver: "tickets")
    ticketRecords(filter:TicketRecordFilterInput, pagination: Pagination):QueryTicketRecordResponse!  @hasRole(resolver: "ticketRecords") @needLogin(resolver: "ticketRecords")
    dishes(filter:DishesFilterInput, pagination: Pagination):QueryDishesResponse!  @hasRole(resolver: "dishes") @needLogin(resolver: "dishes")
    canteens(filter:CanteenFilterInput, pagination: Pagination):QueryCanteenResponse!  @hasRole(resolver: "canteens") @needLogin(resolver: "canteens")
    booking(filter:BookingFilterInput):QueryBookingResponse!  @hasRole(resolver: "booking") @needLogin(resolver: "booking")
    dashboard:DashboardResponse!  @needLogin(resolver: "dashboard")
    messages:String!
}

input ResetPasword {
    ids:[Int!]!
}

input NewTodo {
    text: String!
    userId: String!
}

input NewUser {
    id: Int
    email: String!
    password: String!
    username: String!
    nickname: String
    id_card: String
    is_super: Boolean
    picture: String
    state: Int
    groupId: Int
}

input UpdateUserInput {
    id: Int!
    email: String
    password: String
    username: String
    nickname: String
    id_card: String
    is_super: Boolean
    picture: String
    state: Int
    re_gen_qrcode:Boolean
}

input NewGroup {
    id: Int
    name: String!
    admin: Int!
    parent: Int!
    levels: String!
    userId: [Int!]
}

input NewCanteen {
    id: Int
    name: String!
    groupID: Int!
    breakfastTime: String!
    breakfastPicture: String
    bookingBreakfastDeadline: String!
    lunchTime: String!
    lunchPicture: String
    bookingLunchDeadline: String!
    dinnerTime: String!
    dinnerPicture: String
    bookingDinnerDeadline: String!
    cancelTime:Int!
    adminId: Int!
}

input GenarateTicketInput {
    number: Int!
    userId: Int!
    type: Int!
    price: Int!
}

input TransferTicketInput {
    number: Int!
    type: String!
    fromUserId: Int!
    toUserId: Int!
}

input RecyclingTicketsInput{
    number: Int!
    userId: Int!
    type: Int!
}

input UpdateGroupInput {
    id: Int!
    name: String
    admin: Int
    parent: Int
    levels: String
    userId: [Int!]
}

input UpdateCanteenInput {
    id: Int!
    name: String
    groupID: Int
    breakfastTime: String
    breakfastPicture: String
    bookingBreakfastDeadline: String
    lunchTime: String
    lunchPicture: String
    bookingLunchDeadline: String
    dinnerTime: String
    dinnerPicture: String
    bookingDinnerDeadline: String
    cancelTime:Int
    adminId: Int
}

input NewRole {
    id: Int
    name: String!
    userId: [Int!]
}

input UpdateRoleInput {
    id: Int!
    name: String
    userId: [Int!]
}

input NewDishes  {
    Name: String!
    Picture: String!
}

input UpdateDishesInput {
    id: Int!
    name: String
    picture: String
}

input DeleteIDInput{
    ids:[Int!]!
}

input UserAndGroupRelationshipInput{
    userIds: [Int!]!
    groupId: Int!
}

input UserAndRoleRelationshipInput{
    userIds: [Int!]!
    roleId: Int!
}

input RoleAndPermissionRelationshipInput {
    role: String!
    permissions: [String!]!
}

input LoginInput {
    username:String!
    password:String!
}

input LogoutInput {
    username:String!
}

type LoginResponse {
    token:String!
    permissions:[String!]!
    user:User!
}

enum BookingTypeInput {
    breakfast
    lunch
    dinner
}

input BookingInput {
    userId:Int!
    canteenId:Int!
    type:BookingTypeInput!
    date:String!
    autoCurrentMonth:Boolean
}

input cancelBookingInput{
    userId:Int!
    bookingId:Int!
}

type TransferResponse {
    successCount: Int!
    errorCount: Int!
    errorMsg: String
}

input CanteenQrcodeInput{
    id: Int!
}


input SpendInput{
    canteenId:Int!
    userId:Int!
    uuid:String!
}

type Mutation {
    login(input:LoginInput!):LoginResponse!
    logout(input:LogoutInput!):Boolean!
    createUser(input: NewUser!): User! @hasRole(resolver: "createUser") @needLogin(resolver: "createUser")
    updateUser(input: UpdateUserInput!): User! @hasRole(resolver: "updateUser") @needLogin(resolver: "updateUser")
    deleteUser(input: DeleteIDInput!)  : Boolean! @hasRole(resolver: "deleteUser") @needLogin(resolver: "deleteUser")
    resetPassword(input: ResetPasword!) : String! @hasRole(resolver: "resetPassword") @needLogin(resolver: "resetPassword")

    createGroup(input: NewGroup!): Group! @hasRole(resolver: "createGroup") @needLogin(resolver: "createGroup")
    updateGroup(input: UpdateGroupInput!): Group! @hasRole(resolver: "updateGroup") @needLogin(resolver: "updateGroup")
    deleteGroup(input: DeleteIDInput!)  : Boolean! @hasRole(resolver: "deleteGroup") @needLogin(resolver: "deleteGroup")

    createUserAndGroupRelationship(input: UserAndGroupRelationshipInput!): Boolean! @hasRole(resolver: "createUserAndGroupRelationship") @needLogin(resolver: "createUserAndGroupRelationship")
    removeUserAndGroupRelationship(input: UserAndGroupRelationshipInput!): Boolean! @hasRole(resolver: "removeUserAndGroupRelationship") @needLogin(resolver: "removeUserAndGroupRelationship")

    createRole(input: NewRole!): Role! @hasRole(resolver: "createRole") @needLogin(resolver: "createRole")
    updateRole(input: UpdateRoleInput!): Role! @hasRole(resolver: "updateRole") @needLogin(resolver: "updateRole")
    createUserAndRoleRelationship(input: UserAndRoleRelationshipInput!): Boolean! @hasRole(resolver: "createUserAndRoleRelationship") @needLogin(resolver: "createUserAndRoleRelationship")
    removeUserAndRoleRelationship(input: UserAndRoleRelationshipInput!): Boolean! @hasRole(resolver: "removeUserAndRoleRelationship") @needLogin(resolver: "removeUserAndRoleRelationship")
    createRoleAndPermissionRelationship(input: RoleAndPermissionRelationshipInput!) : Boolean! @hasRole(resolver: "createRoleAndPermissionRelationship") @needLogin(resolver: "createRoleAndPermissionRelationship")

    createDishes(input: NewDishes!): Dishes! @hasRole(resolver: "createDishes") @needLogin(resolver: "createDishes")
    updateDishes(input: UpdateDishesInput!): Dishes! @hasRole(resolver: "updateDishes") @needLogin(resolver: "updateDishes")
    deleteDishes(input: DeleteIDInput!)  : Boolean! @hasRole(resolver: "deleteUser") @needLogin(resolver: "deleteUser")

    createCanteens(input: NewCanteen!): Canteen! @hasRole(resolver: "createCanteens") @needLogin(resolver: "createCanteens")
    updateCanteens(input: UpdateCanteenInput!): Canteen! @hasRole(resolver: "updateCanteens") @needLogin(resolver: "updateCanteens")
    deleteCanteens(input: DeleteIDInput!)  : Boolean! @hasRole(resolver: "deleteCanteens") @needLogin(resolver: "deleteCanteens")

    generateTickets(input: GenarateTicketInput!): QueryTicketResponse!  @hasRole(resolver: "generateTickets") @needLogin(resolver: "generateTickets")
    transferTickets(input: TransferTicketInput!): TransferResponse!  @hasRole(resolver: "transferTickets") @needLogin(resolver: "transferTickets")
    recyclingTickets(input: RecyclingTicketsInput!): Boolean! @hasRole(resolver: "recyclingTickets") @needLogin(resolver: "recyclingTickets")

    createQrcode(input: CanteenQrcodeInput!): String! @hasRole(resolver: "createQrcode") @needLogin(resolver: "createQrcode")

    cancelBooking(input:cancelBookingInput!): Boolean! @hasRole(resolver: "cancelBooking") @needLogin(resolver: "cancelBooking")
    booking(input:BookingInput!): Boolean! @hasRole(resolver: "createBooking") @needLogin(resolver: "createBooking")
    spend(input:SpendInput!): Boolean! @hasRole(resolver: "spend") @needLogin(resolver: "spend")
}

type Message {
    id: ID!
    text: String!
    createdBy: User!
    createdAt: String!
    error: Boolean!
}

type Subscription {
    messageAdded(roomName: String!,adminId: Int!):  Message!
}
